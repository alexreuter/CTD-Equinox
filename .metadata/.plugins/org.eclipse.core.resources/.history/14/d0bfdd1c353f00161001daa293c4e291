
public class LargeNumber 
{
	//Once implement subtracting method then negative numbers will work.
	private String myNumber;
	
	public LargeNumber(String number)
	{
		myNumber = number;
	}
	
	public String toString()
	{
		return myNumber;
	}
	
	public LargeNumber plus(LargeNumber other)
	{
		//This code makes them pad to the same length
		if(myNumber.length()<other.myNumber.length())
		{
			myNumber = leftPad(myNumber,other.myNumber.length());
		}
		else if(myNumber.length()>other.myNumber.length())
		{
			other.myNumber = leftPad(other.myNumber,myNumber.length());
		}
		else
		{
			//System.out.println("They are the same length. No padding nessecary");
		}

		int carry = 0;
		
		LargeNumber results = new LargeNumber("");
		
		//Can use myNumber.length because their lengths should be the same by now
		for(int i = 0;i<myNumber.length();i++)
		{
			int total = 0;
			
			//This goes through each digit of the number from the right one at a time
			int digit1 = Integer.parseInt(myNumber.substring(myNumber.length()-(i+1), myNumber.length()-i));
			int digit2 = Integer.parseInt(other.myNumber.substring(other.myNumber.length()-(i+1), other.myNumber.length()-i));
			
			total = digit1 + digit2 + carry;
			
			//If the total digits is greater than 9
			//Make sure you carry and get the correct digit to write down
			//If you don't need to carry, make carry 0 for the next loop
			
			if(total>9)
			{
				carry = 1;
				total = total - 10;
			}
			else
			{
				carry = 0;
			}
			
			//This adds the final digit to the end of the results string
			results.myNumber = total + results.myNumber;
		}
		
		//If you need to carry from the last calculation add it to the beginning of the number
		if(carry != 0)
		{
			results.myNumber = carry + results.myNumber;
		}
		
		return results;
	}
	
	public LargeNumber subtract(LargeNumber other)
	{
		//This is used at the end to detirmine if the answer is negative
		boolean answerNegative;
		
		//If the first number is not bigger
		if(!isLarger(myNumber,other.toString()))
			 answerNegative = true;
		else
			answerNegative = false;
		
		//This code makes them pad to the same length
				if(myNumber.length()<other.myNumber.length())
				{
					myNumber = leftPad(myNumber,other.myNumber.length());
				}
				else if(myNumber.length()>other.myNumber.length())
				{
					other.myNumber = leftPad(other.myNumber,myNumber.length());
				}
				else
				{
					//System.out.println("They are the same length. No padding nessecary");
				}

				int borrow = 0;
				
				LargeNumber results = new LargeNumber("");
				
				//Can use myNumber.length because their lengths should be the same by now
				for(int i = 0;i<myNumber.length();i++)
				{
					int total = 0;
					
					//This goes through each digit of the number from the right one at a time
					int digit1 = Integer.parseInt(myNumber.substring(myNumber.length()-(i+1), myNumber.length()-i));
					int digit2 = Integer.parseInt(other.myNumber.substring(other.myNumber.length()-(i+1), other.myNumber.length()-i));
					
					
					if((digit1-borrow)-digit2<0)
					{

						borrow = 1;
						total = (digit1+10)-digit2;
					}
					else
					{
						total = (digit1-borrow)-digit2;
						borrow = 0;
					}
					
					//This adds the final digit to the end of the results string
					results.myNumber = total + results.myNumber;
				}
				return results;
	}
	
	public static boolean isLarger(String myNumber, String otherNumber)
	{
		//need to make same size otherwise i to get furthest left values fails
		if(myNumber.length()<otherNumber.length())
		{
			myNumber = leftPad(myNumber,otherNumber.length());
		}
		else if(myNumber.length()>otherNumber.length())
		{
			otherNumber = leftPad(otherNumber,myNumber.length());
		}
		else
		{
			//System.out.println("They are the same length. No padding nessecary");
		}
		
		for(int i = 0;i<myNumber.length()-1;i++)
		{
			if(Integer.parseInt(myNumber.substring(i,i+1))>Integer.parseInt(otherNumber.substring(i,i+1)))
			{
				return true;
			}
			else if(Integer.parseInt(myNumber.substring(i,i+1))<Integer.parseInt(otherNumber.substring(i,i+1)))
			{
				return false;
			}
		}

		System.out.println("They are the same value");
		return false;
	}
	
	private static String leftPad(String number, int padSize)
	{
		
		int difference = padSize-number.length();
		
		if(number.length()<=padSize)
		{
			for(int i = 0;i<difference;i++)
			{
				number = "0" + number;
			}
			return number;
		}
		return "This should never happen";
	}
}
