
public class Quack implements Stack,Queue
{	
	
	private Object[] myArray = new Object[10];
	private int frontIndex = 0;
	private int endIndex = 0;
	
	public Quack(Object[] elements)
	{
		myArray = elements;
	}
	
	public Quack()
	{
		//Do nothing
	}
	
	public boolean enqueue(Object element) {
		
		return false;
	}

	public Object dequeue() {
		// TODO Auto-generated method stub
		return null;
	}

	//This is for a queue
	public Object front() 
	{
		return myArray[endIndex];
	}

	//HOW DO I FIGURE THIS OUT
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	public boolean push(Object element) {
		// TODO Auto-generated method stub
		return false;
	}

	public Object pop() {
		// TODO Auto-generated method stub
		return null;
	}

	//This is for a stack
	public Object top() 
	{
		return myArray[frontIndex];
	}
	
	public String toString()
	{
		String results = "";
		
		for(int i = 0;i<myArray.length;i++)
		{
			if(myArray[i] == null)
			{
				results = results + "X";
			}
			else
			{
				results = results + myArray[i].toString();
			}
		}
		return results;
	}
	
	private int getRidofNullPointers(int x)
	{
		if(x>myArray.length-1)
		{
			x %= 10;
		}
		else if(x<0)
		{
			x += myArray.length;
		}
		
		return x;
	}
	
	private boolean isFull()
	{
		for(int i = 0;i<myArray.length;i++)
		{
			if(myArray[i] == null)
			{
				return false;
			}
		}
		return true;
	}
	
}
